use crate::ast::{Generics, Ident};
use serde::{Deserialize, Serialize};

/// Type definitions
#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize)]
pub enum Ty {
    // The empty type
    Unit,
    /// A literal value, type can be determined at parse time.
    Literal(LiteralTy),
    /// A reference to some other named type, unresolved.
    Variable(Ident, Option<Generics>),
    /// A reference to a generic / universal type.
    Generic(Ident),
    /// A function type.
    Function(Box<Ty>, Box<Ty>),
    /// A tuple type.
    Product(Vec<Ty>),
    /// A new existential type. Not directly representable in the source
    /// languge, but generated by the type checker.
    /// TODO should not be string
    Existential(String),
}

#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize)]
pub enum LiteralTy {
    String,
    Number,
    Bool,
}
