use crate::ast::{Generics, Ident};

use std::fmt;

/// Type definitions
#[derive(Clone, Debug)]
pub enum Ty {
    Unknown,
    // Types that we want to represent, but don't
    Unimplemented,
    // The empty type
    Unit,
    /// A literal value, type can be determined at parse time.
    Literal(LiteralTy),
    Array(Box<Ty>),
    Variable(Ident, Option<Vec<Ty>>),
    /// A new existential type. Not directly representable in the source
    /// languge, but generated by the type checker.
    Existential,
}

// impl fmt::Debug for Ty {
//     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
//         use Ty::*;
//         let msg = match self {
//             Unimplemented => "(Unimplemented)".to_owned(),
//             Literal(lit_ty) => format!("Literal({:?})", lit_ty),
//             Array(ref ty) => format!("Array<{:?}>", ty),
//             Existential => "?".to_owned(),
//             Variable(_, _) => "VARIABLE".to_owned(),
//             _ => "TYPE".to_owned(),
//         };
//         write!(f, "{}", &msg)
//     }
// }

#[derive(Clone, Debug)]
pub enum LiteralTy {
    String,
    Number,
    Bool,
}
