use crate::ast::{Generics, Ident};
use serde::{Deserialize, Serialize};

use std::fmt;

/// Type definitions
#[derive(Clone, PartialEq, Eq, Serialize, Deserialize, Hash)]
pub enum Ty {
    // Types that we want to represent, but don't
    Unimplemented,
    // The empty type
    Unit,
    /// A literal value, type can be determined at parse time.
    Literal(LiteralTy),
    // Array of items,
    Array(Box<Ty>),
    /// The union of multipe types.
    Union(Vec<Ty>),
    /// A reference to some other named type, unresolved.
    Variable(Ident, Option<Generics>),
    /// A reference to a generic / universal type.
    Generic(Ident),
    /// A function type.
    Function(Box<Ty>, Box<Ty>),
    /// A tuple type.
    Product(Vec<Ty>),
    /// A template expression
    Template,
    /// A new existential type. Not directly representable in the source
    /// languge, but generated by the type checker.
    Existential,
}

fn fmt_ty_list(tys: &[Ty], separator: &str) -> String {
    let mut is_first = true;
    tys.iter().fold(String::new(), |acc, ty| {
        acc + if is_first {
            is_first = false;
            ""
        } else {
            separator
        } + format!("{:?}", ty).as_ref()
    })
}

impl fmt::Debug for Ty {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        use Ty::*;
        let msg = match self {
            Unimplemented => "(Unimplemented)".to_owned(),
            Literal(lit_ty) => format!("{:?}", lit_ty),
            Array(ref ty) => format!("Array<{:?}>", ty),
            Function(ref in_ty, ref out_ty) => format!("{:?} -> {:?}", in_ty, out_ty),
            Product(ref tys) => format!("({:?})", fmt_ty_list(tys, ", ")),
            Union(ref tys) => fmt_ty_list(tys, " | "),
            Existential => "?".to_owned(),
            Variable(_, _) => "VARIABLE".to_owned(),
            Generic(_) => "GENERIC".to_owned(),
            Template => "Template".to_owned(),
            _ => "TYPE".to_owned(),
        };
        write!(f, "{}", &msg)
        // write!(f, "Point {{ x: {}, y: {} }}", self.x, self.y)
    }
}

#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize, Hash)]
pub enum LiteralTy {
    String,
    Number,
    Bool,
}
